"""
This script will create a new report file that will get published to Github
pages, that ties together all the various graphs that have been downloaded.
"""
import datetime
import logging
import logging.config
import os

import config
import image_download_config
import pytz

log_config_path = os.path.join(os.path.dirname(__file__), "..", "config", "logging.config")
logging.config.fileConfig(log_config_path)

LOGGER = logging.getLogger(__name__)

report_config = {
    "layout": "default",
    "nav_order": 9,
    "has_children": "false",
    "nav_exclude": "false",
    "has_toc": "false",
    "parent": "Overview",
}


class CreateReport:
    def __init__(self, out_folder):
        self.cur_date = None
        self.out_file = self.get_output_file(out_folder)

    def create_report(self):
        cur_date_str = self.get_date_string()
        LOGGER.info(f"creating report for {cur_date_str}")
        header_str = self.get_header()
        intro_str = self.get_intro()
        body_str = self.get_report()
        with open(self.out_file, "w") as fh:
            fh.write(header_str)
            fh.write(intro_str)
            fh.write(body_str)
        LOGGER.info(f"report created : {self.out_file}")

    def get_output_file(self, out_folder):
        """creates the name of the output file for the current day

        :param out_folder: the folder that the file should be created inside of
        :return: the full path to the md report file that will be generated by
            this script
        """
        date_string = self.get_date_string()
        file_name = f"report_{date_string}.markdown"
        return os.path.join(out_folder, file_name)

    def get_date_string(self, nodash=False):
        """returns a formatted string for the current date

        :param nodash: whether the datestring should be delimited by '-'
            characters or not

        :return: formatted string for current date Y-m-d
        """
        if self.cur_date is None:
            vantz = pytz.timezone('America/Vancouver')
            self.cur_date = datetime.datetime.now(vantz)
        format_str = "%Y-%m-%d"
        if nodash:
            # remove dashes from date format string
            format_str = format_str.replace("-", "")
        return self.cur_date.strftime(format_str)

    def get_header(self) -> str:
        """generates the header portion of the output report file,

        :return: header as string
        """
        date_string = self.get_date_string()
        header_lines = []
        header_lines.append("---")
        header_lines.append(f"title : Report for {date_string}")

        for key in report_config:
            header_lines.append(f"{key} : {report_config[key]}")

        header_lines.append("---\n\n")
        header_str = "\n".join(header_lines)
        return header_str

    def get_intro(self) -> str:
        """gets the string for the markdown report that should appear after the
        header but before the actual report

        :return: intro string that briefly describes the content of the page
        """
        date_string = self.get_date_string()
        intro_str = f"# Accumulated Precipitation\n\nReport for the date {date_string}\n\n"
        return intro_str

    def get_report(self):
        """gets the report component of the markdown file"""
        report_line_list = []
        format_string = "## *{desc}*\n\n" + "![image]({image_url})\n\n"

        ostore_host = config.OBJ_STORE_HOST
        date_str = self.get_date_string(nodash=True)
        url_str = f"https://{config.OBJ_STORE_HOST}"

        for img_config in image_download_config.ALL_CONFIG_CLASS_LIST:
            image_url = os.path.join(
                url_str,
                config.OBJ_STORE_BUCKET,
                config.OBJ_STORE_DEST_FOLDER,
                date_str,
                img_config.output_image_file,
            )
            report_line = format_string.format(desc=img_config.description, image_url=image_url)
            report_line_list.append(report_line)

        report_str = "\n".join(report_line_list)
        return report_str


out_dir = os.path.realpath(
    os.path.join(os.path.dirname(__file__), "..", "..", "report", "soil_moisture")
)
LOGGER.debug(f"outdir: {out_dir}")
cr = CreateReport(out_dir)
cr.create_report()
